-- Drop tables if they exist
DROP TABLE IF EXISTS Users;
DROP TABLE IF EXISTS Topics;
DROP TABLE IF EXISTS Projects;
DROP TABLE IF EXISTS Colaborators;
DROP TABLE IF EXISTS Tasks;
DROP TABLE IF EXISTS Sprints;
DROP TABLE IF EXISTS Answers;

-- Make sure that foreign_key support is turned on
PRAGMA foreign_keys = ON;

-- Create a table for users where a user has an id (primary key)
CREATE TABLE Users (
  id INTEGER PRIMARY KEY,
  user_name TEXT,
  is_active BOOLEAN,
  email TEXT,
  password TEXT
);


-- Create a table for projects where a project has an id (primary key)
CREATE TABLE Projects (
  id INTEGER PRIMARY KEY,
  name TEXT,
  status TEXT,
  description TEXT,
  max_points_per_sprint INTEGER,
  user_id INTEGER,
  FOREIGN KEY (user_id) REFERENCES Users(id)
);


-- Create a table for topics where a topic has an id (primary key)
CREATE TABLE Topics (
  id INTEGER PRIMARY KEY,
  title TEXT,
  description TEXT,
  answered BOOLEAN,
  user_id INTEGER,
  project_id INTEGER,
  task_id INTEGER,
  sprint_id INTEGER,
  FOREIGN KEY (sprint_id,project_id) REFERENCES Sprints(id,project_id),
  FOREIGN KEY (task_id) REFERENCES Tasks(id),
  FOREIGN KEY (user_id) REFERENCES Users(id),
  FOREIGN KEY (project_id) REFERENCES Projects(id)
);


-- Create a table for the todos where each todo references the primary key of a user
CREATE TABLE Colaborators (
  user_id INTEGER,
  project_id INTEGER
);


-- Create a table for tasks where a tasks has an id (primary key)
CREATE TABLE Tasks (
  id INTEGER PRIMARY KEY,
  priority TEXT,
  position TEXT,
  type TEXT,
  description TEXT,
  title TEXT,
  points INTEGER,
  super_task_id INTEGER,
  sprint_id INTEGER,
  project_id INTEGER,
  user_id INTEGER,
  FOREIGN KEY (sprint_id,project_id) REFERENCES Sprints(id,project_id),
  FOREIGN KEY (super_task_id) REFERENCES Tasks(id),
  FOREIGN KEY (user_id) REFERENCES Users(id)
);


-- Create a table for sprints where a topic has an id (primary key)
CREATE TABLE Sprints (
  id INTEGER,
  status TEXT,
  duration INTEGER,
  project_id INTEGER,
  PRIMARY KEY (id,project_id),
  FOREIGN KEY (project_id) REFERENCES Projects(id)
);

-- Trigger to autoincrement the sprint id, due to having a tuple primary key.
CREATE TRIGGER autoinc_sprint_id AFTER INSERT ON Sprints
  BEGIN
    UPDATE Sprints SET id = rowid WHERE ((rowid = rowid) AND (id is null)) ;
  END;


-- Create a table for answers where a topic has an id (primary key)
CREATE TABLE Answers (
  id INTEGER PRIMARY KEY,
  description TEXT,
  topic_id INTEGER,
  user_id INTEGER,
  FOREIGN KEY (topic_id) REFERENCES Topics(id),
  FOREIGN KEY (user_id) REFERENCES Users(id)
);


-- Add some users to the users table
INSERT INTO Users(user_name,is_active,email,password) VALUES ('name',1,'mail','pass');
INSERT INTO Users(user_name,is_active,email,password) VALUES ('name1',1,'mail','pass');
INSERT INTO Users(user_name,is_active,email,password) VALUES ('name2',0,'mail','pass');

INSERT INTO Projects(name,status,description,max_points_per_sprint,user_id) VALUES ('project1','Active','project1 descr',10,1);
INSERT INTO Projects(name,status,description,max_points_per_sprint,user_id) VALUES ('project2','Active','project2 descr',15,2);
INSERT INTO Projects(name,status,description,max_points_per_sprint,user_id) VALUES ('project3','Active','project3 descr',16,3);

INSERT INTO Colaborators(user_id,project_id) VALUES (2,1);
INSERT INTO Colaborators(user_id,project_id) VALUES (3,1);

INSERT INTO Sprints(id,status,duration,project_id) VALUES (0,'Backlog',0,1);
INSERT INTO Sprints(id,status,duration,project_id) VALUES (0,'Backlog',0,2);
INSERT INTO Sprints(id,status,duration,project_id) VALUES (0,'Backlog',0,3);
INSERT INTO Sprints(status,duration,project_id) VALUES ('Started',2,1);
INSERT INTO Sprints(status,duration,project_id) VALUES ('Started',1,2);
INSERT INTO Sprints(status,duration,project_id) VALUES ('Started',1,3);

INSERT INTO Tasks(priority,position,type,description,title,points,super_task_id,sprint_id,project_id,user_id) VALUES ('Low','Backlog','Feature','descr','task1',5,1,4,1,1);
INSERT INTO Tasks(priority,position,type,description,title,points,super_task_id,sprint_id,project_id,user_id) VALUES ('Normal','Process','Bug','descr','subtask1',5,2,5,2,2);
INSERT INTO Tasks(priority,position,type,description,title,points,super_task_id,sprint_id,project_id,user_id) VALUES ('High','Done','Bug','descr','task2',10,3,6,3,3);

INSERT INTO Topics(title,description,answered,user_id,project_id,task_id,sprint_id) VALUES ('topic1','topic1 descr',0,1,1,1,4);
INSERT INTO Topics(title,description,answered,user_id,project_id,task_id,sprint_id) VALUES ('topic2','topic2 descr',0,2,2,2,5);
INSERT INTO Topics(title,description,answered,user_id,project_id,task_id,sprint_id) VALUES ('topic3','topic3 descr',1,3,3,3,6);

INSERT INTO Answers(description,topic_id,user_id) VALUES ('answer1',3,3);
