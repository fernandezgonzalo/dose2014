import http.client
import json, login

from suite_functions import check_reply

params = "";

expected_response = json.loads("""
{"description":"To be implemented","pbis":[{"id":1,"name":"The system should allow user to create and manage its own account","description":"To use the system user have to log in or register. Logged in users can change profile settings and delete account","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":2,"name":"The system should allow developer to create and manage a project","description":"To start project developer have to create it. After creation developer becomes the manager of this project. Also manager can change settings of this project or delete it","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":3,"name":"The system should allow manager to create and manage a backlog","description":"After project creation manager have to create backlog. Also, if necessary, manager can edit or delete it","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":4,"name":"The system should allow developers and manager to see project’s backlog","description":"Developers, manager of the project must have opportunity to see project’s backlog","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":5,"name":"The system should allow manager to create and manage a sprint logs","description":"After backlog creation manager can create a sprint logs. Also, if necessary, manager can edit or delete it. If sprint is started, then manager cannot edit or delete the backlog","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":6,"name":"The system should allow developers and manager to see project’s sprint logs","description":"Developers and manager of the project must have opportunity to see project’s sprint logs","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":7,"name":"The system should allow manager to assign tasks with points to the developers","description":"Manager can check tasks with different points and assign them to different developers of current project","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":8,"name":"The system should allow manager to divide sprint log into tasks and manage these tasks","description":"Manager can create, modify and delete tasks, that then will be assigned to developers","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":9,"name":"The system should allow manager and developer to see his/her tasks","description":"Manager/developer can see tasks that were assigned to him/her by himself/manager","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":10,"name":"The system should allow developers to change the states of tasks ","description":"There are three states for every task: awaiting, ongoing, completed. After creation the state of task automatically becomes “awaiting”. When developer begins to do the assigned task he/she changes task state to “ongoing”. After task completion developer changes task state to “completed”","sprintlog":1,"type":"requirement","priority":3,"dueDate":1416898814},{"id":11,"name":"The system should allow user to see project statistics","description":"Users can see projects’ statistics that represents percent of their execution with dates when sprint logs were finished","sprintlog":1,"type":"requirement","priority":2,"dueDate":1416898814},{"id":12,"name":"The system should allow user to chat with other users","description":"Users can communicate with each other. Also it is possible to create group chats. After project creation group chat with all team members except stakeholder automatically appears. If project manager adds new team member, he/she automatically joins to project chat","sprintlog":1,"type":"requirement","priority":2,"dueDate":1416898814},{"id":13,"name":"The system should allow forming chart of developers according to their points","description":"Developers and managers can see developers’ chart. Chart is formed in order to their developers’ points, that they gained by tasks’ performing. Also it can be possible to use other kinds of order to form chart","sprintlog":1,"type":"requirement","priority":2,"dueDate":1416898814},{"id":14,"name":"The system should allow user to see ongoing events on dashboard","description":"Users can see dashboard. Dashboard shows ongoing events of the users’ project. If user has more than one project, he sees only one dashboard with ongoing events of every project (it must be clear that every event belongs to its project)","sprintlog":1,"type":"requirement","priority":2,"dueDate":1416898814},{"id":15,"name":"The system should be fault tolerant (availability)","description":"The system must be available at most of time (not less than 99% of time)","sprintlog":1,"type":"nonfunctionalrequirement","priority":3,"dueDate":1416898814},{"id":16,"name":"The system should provide data integrity","description":"All information of this system, including databases, software, the executable code components of the system and chat history and all the data should not be lost, also system should have redundant copies","sprintlog":1,"type":"nonfunctionalrequirement","priority":3,"dueDate":1416898814},{"id":17,"name":"The system should provide confidentiality","description":"Access to certain information should be provided only to corresponding authorized users, which have permissions to it. All passwords should be stored in the system in an encrypted form.","sprintlog":1,"type":"nonfunctionalrequirement","priority":3,"dueDate":1416898814},{"id":18,"name":"The system should be user friendly","description":"Interface of the system should be intuitively understandable by the user","sprintlog":1,"type":"nonfunctionalrequirement","priority":2,"dueDate":1416898814},{"id":19,"name":"Create an account","description":"To create user’s account","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":20,"name":"Log in","description":"To log in","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":21,"name":"Manage account","description":"To manage user’s account","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":22,"name":"Delete account","description":"To delete user’s account","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":23,"name":"Create project","description":"To create project","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":24,"name":"Manage project","description":"To manage project","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":25,"name":"Close the project ","description":"To close project","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":26,"name":"Create backlogs, sprint logs and tasks ","description":"To create backlog, sprint logs and tasks","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":27,"name":"Manage backlogs, sprint logs and tasks ","description":"To manage backlog, sprint logs and tasks","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":28,"name":"Backlogs, sprint logs and tasks review","description":"To show backlogs, sprint logs and tasks to developers and managers","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":29,"name":"Assign tasks","description":"Manager assigns tasks with points to the developers","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":30,"name":"Change task states","description":"To change task states","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":31,"name":"Developers chart","description":"The system should allow forming chart of developers","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":32,"name":"Project’s progress","description":"To show ongoing tasks on dashboard and project statistics","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814},{"id":33,"name":"Chat","description":"To organize communication between users","sprintlog":1,"type":"bugfix","priority":3,"dueDate":1416898814}]}
""")

def exec_test(debug=False):
    headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain", "Cookie" : "_pdt_session_id_="+login.cookie_id+""}
    conn = http.client.HTTPConnection("localhost", 8080)
    conn.request("GET", "/projects/1/getbacklog", params, headers)

    return check_reply(conn, expected_response, debug)
